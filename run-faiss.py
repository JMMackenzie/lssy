import faiss
import numpy as np
import pickle5 as pickle
import argparse
import os
import pandas as pd


def read_pkl(path):
    """
    Read a pickled query with id/embeddings stored.
    This corresponds to Pyserini ANCE embedded queries
    """
    df = pd.read_pickle(os.path.join(path, 'embedding.pkl'))
    return df['id'].tolist(), df['embedding'].tolist()

def read_queries(path):
    """
    Read the queries generated by the random queries tool
    """
    data = np.load(path)
    return data['qids'].tolist(), data['query_vectors'].tolist()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--faiss-index', type=str, help='path to FAISS index', required=True)
    parser.add_argument('--k', type=int, help='k (nearest neighbors)', required=False, default=1000)
    parser.add_argument('--queries', type=str, help='query file', required=True)
    parser.add_argument('--output', type=str, help='output trec file', required=True)
    args = parser.parse_args()

    output = open(args.output, 'w')

    # (1): Load the queries
    print ("Loading query embeddings from file")
    qids, query_embeddings = read_pkl(args.queries) #read_queries(args.queries)
    query_embeddings = np.array(query_embeddings, dtype=np.float32)

    # (2): Load the index
    print ("Loading FAISS index from file")
    idx = faiss.read_index(args.faiss_index)
    
    # (3): Run the queries
    print ("Running the queries...")
    n, m = query_embeddings.shape
    assert m == idx.d
    faiss.omp_set_num_threads(30)
    D, I = idx.search(query_embeddings, args.k)

    for qids, distances, indexes in zip(qids, D, I):
        for rank, (score, idx) in enumerate(zip(distances, indexes)):
            output.write("{} Q0 {} {} {} FAISS\n".format(qids, idx, rank+1, score)) 

